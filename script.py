import telebot
from telebot import types
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton 
import textlines as TL
import server
import threading
import sqlite3

#TOKEN = "7623890164:AAGjbXji5sklmFccgwd3Z30xZRFNS0ZkDU4" –ë–æ—Ç –∫–æ–ª–ª–µ–¥–∂–∞ –∫–æ—Ç–æ—Ä—ã–π –∫—Ä—É—Ç–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ

TOKEN = "7826954502:AAG47IWR854AQRGXMqW9Qd18hX1IXLwqtmU" #–¢–µ—Å—Ç–æ–≤–æ–≤—ã–π –±–æ—Ç

bot = telebot.TeleBot(TOKEN)

def init_db():
    conn = sqlite3.connect("phone_numbers.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS phone_numbers (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            phone TEXT,
            career_result TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_or_update_user(user_id, username=None, full_name=None, phone=None, career_result=None):
    conn = sqlite3.connect("phone_numbers.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO phone_numbers (user_id) VALUES (?)", (user_id,))
    fields = []
    values = []
    if username is not None:
        fields.append("username=?")
        values.append(username)
    if full_name is not None:
        fields.append("full_name=?")
        values.append(full_name)
    if phone is not None:
        fields.append("phone=?")
        values.append(phone)
    if career_result is not None:
        fields.append("career_result=?")
        values.append(career_result)
    if fields:
        values.append(user_id)
        cursor.execute(f"UPDATE phone_numbers SET {', '.join(fields)} WHERE user_id=?", values)
    conn.commit()
    conn.close()

menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.row(KeyboardButton("üè´ –ö–æ–ª–ª–µ–¥–∂"))
menu_keyboard.row(KeyboardButton("üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"), KeyboardButton("üß≠ –ü–æ–¥–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"))
menu_keyboard.row(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–°–∞–π—Ç"), KeyboardButton("üìç –ê–¥—Ä–µ—Å"))
menu_keyboard.row(KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"), KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))

user_states = {}
user_data = {}
STATE_WAITING_NAME = "WAITING_NAME"
STATE_WAITING_PHONE = "WAITING_PHONE"

@bot.message_handler(commands=["start"])
def start_handler(message: Message):
    photo_path = "image/image1.jpg"  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ

    try:
        with open(photo_path, "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption="üëã –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç–±–æ—Ç –∫–æ–ª–ª–µ–¥–∂–∞ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ê–∫–∞–¥–µ–º–∏–∏ –ë–∏–∑–Ω–µ—Å–∞.")
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=menu_keyboard)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    server.app.run(debug=True, host="0.0.0.0", port=5000, use_reloader=False)


# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_flask, daemon=True).start()

@bot.message_handler(func=lambda m: m.text in [
    "üè´ –ö–æ–ª–ª–µ–¥–∂",
    "üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
    "üß≠ –ü–æ–¥–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–°–∞–π—Ç",
    "üìç –ê–¥—Ä–µ—Å",
    "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
    "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
])
def menu_handler(message: Message):
    user_id = message.chat.id
    text = message.text

    if text == "üè´ –ö–æ–ª–ª–µ–¥–∂":
        show_college_submenu(user_id)
    elif text == "üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":
        bot.send_message(user_id, TL.professions, parse_mode='Markdown')
    elif text == "üß≠ –ü–æ–¥–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
        start_career_test(user_id)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–°–∞–π—Ç":
        bot.send_message(
            user_id,
            f"{TL.contact}\n\n–°–∞–π—Ç: https://cmab.edu.kz",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    elif text == "üìç –ê–¥—Ä–µ—Å":
        bot.send_message(
            user_id,
            "–£–ª–∏—Ü–∞ –ú—É—Å—Ç–∞—Ñ—ã –û–∑—Ç—é—Ä–∫–∞, 5–∞\n–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ê–ª–º–∞—Ç—ã\n"
            "üìç [–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö](https://go.2gis.com/HfMFb)",
            parse_mode='Markdown'
        )
    elif text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
       show_question_submenu(user_id)
    
    elif text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        user_states[user_id] = STATE_WAITING_NAME
        bot.send_message(
            user_id,
            "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *—Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
            parse_mode="Markdown"
        )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == STATE_WAITING_NAME)
def handle_full_name(message: Message):
    user_id = message.chat.id
    full_name = message.text.strip()
    if not full_name:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return
    user_data[user_id] = {"full_name": full_name}
    user_states[user_id] = STATE_WAITING_PHONE
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    bot.send_message(
        user_id,
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        parse_mode="Markdown",
        reply_markup=kb
    )

@bot.message_handler(content_types=["contact"])
def handle_contact(message: Message):
    user_id = message.chat.id
    if user_states.get(user_id) == STATE_WAITING_PHONE and message.contact:
        phone_number = message.contact.phone_number
        full_name = user_data[user_id]["full_name"]
        info = bot.get_chat(user_id)
        username = info.username if info.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        save_or_update_user(user_id, username=username, full_name=full_name, phone=phone_number)
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        bot.send_message(
            user_id,
            "–°–ø–∞—Å–∏–±–æ! –í—ã *–∑–∞–ø–∏—Å–∞–Ω—ã*. –í–∞—à –Ω–æ–º–µ—Ä –∏ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üòé",
            parse_mode="Markdown",
            reply_markup=menu_keyboard
        )
    else:
        bot.send_message(user_id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", reply_markup=menu_keyboard)

def show_college_submenu(user_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üìÖ –û –Ω–∞—Å"))
    kb.row(KeyboardButton("üë©‚Äçüè´ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"))
    kb.row(KeyboardButton("üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(user_id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∫–æ–ª–ª–µ–¥–∂–µ?", reply_markup=kb)
        
@bot.message_handler(func=lambda m: m.text in [
    "üìÖ –û –Ω–∞—Å", "üë©‚Äçüè´ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
])
def college_submenu_handler(message: Message):
    text = message.text
    if text == "üìÖ –û –Ω–∞—Å":
        bot.send_message(message.chat.id, TL.college_history)
    elif text == "üë©‚Äçüè´ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π":
      
       bot.send_message(message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ...")
      
       photo_paths = ["image/class_work1.png", "image/class_work2.png", "image/class_work3.png","image/class_work4.png","image/class_work5.png"]  # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ

       media = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç–æ–≤
       
       for path in photo_paths:
           try:
               media.append(types.InputMediaPhoto(open(path, "rb")))  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
           except FileNotFoundError:
               print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
       
       if media:
           bot.send_media_group(message.chat.id, media)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
           bot.send_message(message.chat.id, "–ù–µ —Å–∫—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —É—Ä–æ–∫–∏")
       else:
           bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")

    elif text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        bot.send_message(message.chat.id, TL.college_activities)

        bot.send_message(message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ...")
      
        photo_paths = ["image/event_photo.png", "image/event_photo2.png", "image/event_photo3.png","image/event_photo4.png","image/event_photo5.png", "image/event_photo6.png", "image/event_photo7.png", "image/event_photo8.png"]  # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ

        media = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç–æ–≤
       
        for path in photo_paths:
           try:
               media.append(types.InputMediaPhoto(open(path, "rb")))  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
           except FileNotFoundError:
               print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
       
        if media:
           bot.send_media_group(message.chat.id, media)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
           bot.send_message(message.chat.id, TL.event_court)
        else:
           bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
        bot.send_message(message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ...")
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        video_path = "image/bisnesWomen.mp4"
        try:
            with open(video_path, "rb") as video:
                bot.send_video(message.chat.id, video, caption="–í–∏–¥–µ–æ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üíº –ë–ò–ó–ù–ï–°-–õ–ï–î–ò\n\n 20 —Ñ–µ–≤—Ä–∞–ª—è –≤ –ê–ª–º–∞—Ç—ã —Å–æ—Å—Ç–æ—è–ª—Å—è –µ–∂–µ–≥–æ–¥–Ω—ã–π —Ñ–æ—Ä—É–º Women in Business 2025, —Å—Ç–∞–≤—à–∏–π –≤–∞–∂–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –¥–ª—è –æ–±–º–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏, –æ–ø—ã—Ç–∞ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –∂–µ–Ω—â–∏–Ω-–ª–∏–¥–µ—Ä–æ–≤, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –∏ —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.\n –ù–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–æ—è–≤–∏–ª–∏ —Å–µ–±—è –∫–∞–∫ –æ–¥–Ω–∏ –∏–∑ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã, —É—á–∞—Å—Ç–≤—É—è –≤ –¥–∏—Å–∫—É—Å—Å–∏—è—Ö –∏ —Ä–∞—Å—à–∏—Ä—è—è —Å–≤–æ–π –∫—Ä—É–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n –ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ–º—Å—è, —á—Ç–æ–±—ã –Ω–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ—Å–µ—â–∞–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤–µ–¥—å —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.\n –§–æ—Ä—É–º –ø–æ—Å–µ—Ç–∏–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä –Ω–∞—à–µ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞ –•–∏—Å–º–∞—Ç—É–ª–ª–∏–Ω–∞ –ê.–ê. –≤–º–µ—Å—Ç–µ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –∂–µ–Ω—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.\n –í–∞–∂–Ω—ã–µ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞ ‚Äî –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ä–æ–ª—å –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∂–µ–Ω—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Äî —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∑–Ω–∞—á–∏–º—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º!")
        except FileNotFoundError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            
            
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def back_handler(message: Message):
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=menu_keyboard
    )

# –ú–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤
def show_question_submenu(user_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    
    bot.send_message(user_id, TL.faq, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
@bot.message_handler(func=lambda m: m.text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
def faq_handler(message):
    show_question_submenu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@bot.message_handler(func=lambda m: m.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def question_submenu_handler(message):
    bot.send_message(message.chat.id, TL.question)

@bot.message_handler(func=lambda m: m.text == "–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏—è?")
def question_submenu_handler(message):
    bot.send_message(message.chat.id, "–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞ —Å 8:00 –¥–æ 13:00\n –í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞ —Å 12:00 –¥–∞ 17:00\n –¢—Ä–µ—Ç—å—è —Å–º–µ–Ω–∞ —Å 10:00 –¥–æ 15:00")

@bot.message_handler(func=lambda m: m.text == "–ö–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –∫–æ–ª–ª–µ–¥–∂–µ?")
def question_submenu_handler(message):
    bot.send_message(message.chat.id, "–í –∫–æ–ª–ª–µ–¥–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞, –ª–æ–≥–∏—Å—Ç–∏–∫–∏, –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ª–∞, —É—á—ë—Ç–∞ –∏ –∞—É–¥–∏—Ç–∞, –ø—Ä–∞–≤–æ–≤–µ–¥–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥—á–µ—Å–∫–æ–≥–æ –¥–µ–ª–∞, –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∞—Ä—Ö–∏–≤–æ–≤–µ–¥–µ–Ω–∏—è, —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏.")

@bot.message_handler(func=lambda m: m.text == "–ö—É–¥–∞ —Å–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?")
def question_submenu_handler(message):
    bot.send_message(message.chat.id, "–ê–¥—Ä–µ—Å:–≥. –ê–ª–º–∞—Ç—ã, —É–ª–∏—Ü–∞ –ú—É—Å—Ç–∞—Ñ—ã –û–∑—Ç—é—Ä–∫–∞, 5–∞\n–ö–∞–±–∏–Ω–µ—Ç –ø—Ä–∏—ë–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: 1 —ç—Ç–∞–∂, 102 –∫–∞–±–∏–Ω–µ—Ç")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def back_handler(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu_keyboard)


user_answers = {}
active_users = set()

def start_career_test(user_id):
    active_users.add(user_id)
    user_answers[user_id] = []
    ask_career_question(user_id, 0)

def ask_career_question(user_id, index):
    if index < len(TL.career_questions):
        question, options = TL.career_questions[index]
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for opt in options:
            kb.add(KeyboardButton(opt))
        kb.row(KeyboardButton("‚ùå –í—ã–π—Ç–∏"))
        bot.send_message(user_id, f"ü§î {question}", reply_markup=kb)
    else:
        finish_career_test(user_id)

def finish_career_test(user_id):
    answers = user_answers.get(user_id, [])
    result = TL.career_results.get(tuple(answers), "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    bot.send_message(
        user_id,
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏:\n{result}",
        reply_markup=menu_keyboard
    )
    info = bot.get_chat(user_id)
    username = info.username if info.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    save_or_update_user(user_id, username=username, career_result=result)
    active_users.discard(user_id)
    user_answers.pop(user_id, None)

@bot.message_handler(func=lambda m: m.chat.id in active_users)
def career_answer_handler(message: Message):
    user_id = message.chat.id
    if message.text == "‚ùå –í—ã–π—Ç–∏":
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ—Å—Ç–∞.", reply_markup=menu_keyboard)
        active_users.discard(user_id)
        user_answers.pop(user_id, None)
        return
    user_answers[user_id].append(message.text)
    ask_career_question(user_id, len(user_answers[user_id]))

if __name__ == "__main__":
    bot.infinity_polling()
    print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")