import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
import textlines as TL
import server
import threading
import sqlite3

TOKEN = "7623890164:AAGjbXji5sklmFccgwd3Z30xZRFNS0ZkDU4"
bot = telebot.TeleBot(TOKEN)

def init_db():
    conn = sqlite3.connect("phone_numbers.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS phone_numbers (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            phone TEXT,
            career_result TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def save_or_update_user(user_id, username=None, full_name=None, phone=None, career_result=None):
    conn = sqlite3.connect("phone_numbers.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO phone_numbers (user_id) VALUES (?)", (user_id,))
    fields = []
    values = []
    if username is not None:
        fields.append("username=?")
        values.append(username)
    if full_name is not None:
        fields.append("full_name=?")
        values.append(full_name)
    if phone is not None:
        fields.append("phone=?")
        values.append(phone)
    if career_result is not None:
        fields.append("career_result=?")
        values.append(career_result)
    if fields:
        values.append(user_id)
        cursor.execute(f"UPDATE phone_numbers SET {', '.join(fields)} WHERE user_id=?", values)
    conn.commit()
    conn.close()

menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.row(KeyboardButton("üè´ –ö–æ–ª–ª–µ–¥–∂"))
menu_keyboard.row(KeyboardButton("üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"), KeyboardButton("üìç –ê–¥—Ä–µ—Å"))
menu_keyboard.row(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–°–∞–π—Ç"))
menu_keyboard.row(KeyboardButton("üß≠ –ü–æ–¥–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"))
menu_keyboard.row(KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))

user_states = {}
user_data = {}
STATE_WAITING_NAME = "WAITING_NAME"
STATE_WAITING_PHONE = "WAITING_PHONE"

@bot.message_handler(commands=["start"])
def start_handler(message: Message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=menu_keyboard
    )

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
#def run_flask():
    server.app.run(debug=True, host="0.0.0.0", port=5000, use_reloader=False)


# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
#threading.Thread(target=run_flask, daemon=True).start()

@bot.message_handler(func=lambda m: m.text in [
    "üè´ –ö–æ–ª–ª–µ–¥–∂",
    "üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
    "üìç –ê–¥—Ä–µ—Å",
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–°–∞–π—Ç",
    "üß≠ –ü–æ–¥–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
    "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
])
def menu_handler(message: Message):
    user_id = message.chat.id
    text = message.text

    if text == "üè´ –ö–æ–ª–ª–µ–¥–∂":
        show_college_submenu(user_id)
    elif text == "üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":
        bot.send_message(user_id, TL.professions, parse_mode='Markdown')
    elif text == "üìç –ê–¥—Ä–µ—Å":
        bot.send_message(
            user_id,
            "–£–ª–∏—Ü–∞ –ú—É—Å—Ç–∞—Ñ—ã –û–∑—Ç—é—Ä–∫–∞, 5–∞\n–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ê–ª–º–∞—Ç—ã\n"
            "üìç [–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö](https://go.2gis.com/HfMFb)",
            parse_mode='Markdown'
        )
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–°–∞–π—Ç":
        bot.send_message(
            user_id,
            f"{TL.contact}\n\n–°–∞–π—Ç: https://cmab.edu.kz",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    elif text == "üß≠ –ü–æ–¥–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
        start_career_test(user_id)
    elif text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        user_states[user_id] = STATE_WAITING_NAME
        bot.send_message(
            user_id,
            "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *—Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
            parse_mode="Markdown"
        )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == STATE_WAITING_NAME)
def handle_full_name(message: Message):
    user_id = message.chat.id
    full_name = message.text.strip()
    if not full_name:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return
    user_data[user_id] = {"full_name": full_name}
    user_states[user_id] = STATE_WAITING_PHONE
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    bot.send_message(
        user_id,
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        parse_mode="Markdown",
        reply_markup=kb
    )

@bot.message_handler(content_types=["contact"])
def handle_contact(message: Message):
    user_id = message.chat.id
    if user_states.get(user_id) == STATE_WAITING_PHONE and message.contact:
        phone_number = message.contact.phone_number
        full_name = user_data[user_id]["full_name"]
        info = bot.get_chat(user_id)
        username = info.username if info.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        save_or_update_user(user_id, username=username, full_name=full_name, phone=phone_number)
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        bot.send_message(
            user_id,
            "–°–ø–∞—Å–∏–±–æ! –í—ã *–∑–∞–ø–∏—Å–∞–Ω—ã*. –í–∞—à –Ω–æ–º–µ—Ä –∏ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üòé",
            parse_mode="Markdown",
            reply_markup=menu_keyboard
        )
    else:
        bot.send_message(user_id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", reply_markup=menu_keyboard)

def show_college_submenu(user_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è"))
    kb.row(KeyboardButton("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"))
    kb.row(KeyboardButton("üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
    kb.row(KeyboardButton("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏"))
    kb.row(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(user_id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∫–æ–ª–ª–µ–¥–∂–µ?", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text in [
    "üìÖ –ò—Å—Ç–æ—Ä–∏—è", "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏"
])
def college_submenu_handler(message: Message):
    text = message.text
    if text == "üìÖ –ò—Å—Ç–æ—Ä–∏—è":
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∏ –∫—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –∫–æ–ª–ª–µ–¥–∂–∞...")
    elif text == "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏":
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    elif text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—É—á–µ–±–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    elif text == "ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏":
        bot.send_message(message.chat.id, "–ö–∞–∫ –≤ –∫–æ–ª–ª–µ–¥–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –ò–ò...")

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def back_handler(message: Message):
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=menu_keyboard
    )

user_answers = {}
active_users = set()

def start_career_test(user_id):
    active_users.add(user_id)
    user_answers[user_id] = []
    ask_career_question(user_id, 0)

def ask_career_question(user_id, index):
    if index < len(TL.career_questions):
        question, options = TL.career_questions[index]
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for opt in options:
            kb.add(KeyboardButton(opt))
        kb.row(KeyboardButton("‚ùå –í—ã–π—Ç–∏"))
        bot.send_message(user_id, f"ü§î {question}", reply_markup=kb)
    else:
        finish_career_test(user_id)

def finish_career_test(user_id):
    answers = user_answers.get(user_id, [])
    result = TL.career_results.get(tuple(answers), "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    bot.send_message(
        user_id,
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏:\n{result}",
        reply_markup=menu_keyboard
    )
    info = bot.get_chat(user_id)
    username = info.username if info.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    save_or_update_user(user_id, username=username, career_result=result)
    active_users.discard(user_id)
    user_answers.pop(user_id, None)

@bot.message_handler(func=lambda m: m.chat.id in active_users)
def career_answer_handler(message: Message):
    user_id = message.chat.id
    if message.text == "‚ùå –í—ã–π—Ç–∏":
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ—Å—Ç–∞.", reply_markup=menu_keyboard)
        active_users.discard(user_id)
        user_answers.pop(user_id, None)
        return
    user_answers[user_id].append(message.text)
    ask_career_question(user_id, len(user_answers[user_id]))

if __name__ == "__main__":
    bot.infinity_polling()
    print("—á—É—Ä–∫–∞ –∑–∞–≤–µ–ª–∞—Å—å")
